/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * AntennaConfigDlg.java
 *
 * Created on May 3, 2011, 12:55:36 AM
 */

import com.mot.rfid.api3.Antennas.Config;
import com.mot.rfid.api3.FrequencyHopTable;
import com.mot.rfid.api3.InvalidUsageException;
import com.mot.rfid.api3.OperationFailureException;
import java.awt.event.ItemEvent;

/**
 *
 * @author CFRN78
 */
public class AntennaConfigDlg extends javax.swing.JDialog {
    /** Creates new form AntennaConfigDlg */
    public AntennaConfigDlg(java.awt.Frame parent, boolean modal) {
        super(parent, modal);
        initComponents();

        short[] antennaList = RFIDMainDlg.rfidBase.getMyReader().Config.Antennas.getAvailableAntennas();

        
        // Add Receive sensitivity
        int[] receiveSensitivityValues = RFIDMainDlg.rfidBase.getMyReader().ReaderCapabilities.getReceiveSensitivityValues();
        for (int index = 0; index < receiveSensitivityValues.length; index++)
            jComboBoxReceiveSensitivity.addItem(String.valueOf(receiveSensitivityValues[index]));

        // Add Transmit Power
        int[] transmitPowerLevelValues = RFIDMainDlg.rfidBase.getMyReader().ReaderCapabilities.getTransmitPowerLevelValues();
        for (int index = 0; index < transmitPowerLevelValues.length; index++)
            jComboBoxTransmitPower.addItem(String.valueOf(transmitPowerLevelValues[index]));

        // if frequency hopping enabled, show hop table else transmit frequency table
        if (RFIDMainDlg.rfidBase.getMyReader().ReaderCapabilities.isHoppingEnabled())
        {
            jLabelTxFrequency.setText("Hop table ID");
            for (int index = 0; index < RFIDMainDlg.rfidBase.getMyReader().ReaderCapabilities.FrequencyHopInfo.Length(); index++)
                jComboBoxTransmitFrequency.addItem(String.valueOf(RFIDMainDlg.rfidBase.getMyReader().ReaderCapabilities.FrequencyHopInfo.getFrepuencyHopTablesInfo(index).getHopTableID()));

            FrequencyHopTable frequencyHopTablesInfo = RFIDMainDlg.rfidBase.getMyReader().ReaderCapabilities.FrequencyHopInfo.getFrepuencyHopTablesInfo(0);
            int[] frequencyHopValues = frequencyHopTablesInfo.getFrequencyHopValues();
            
            String frequencies = "";
            for (int index = 0; index < frequencyHopValues.length; index++)
                frequencies += String.valueOf(frequencyHopValues[index]) + ", ";

            frequencies = frequencies.substring(0, frequencies.length() - 2);
            jTextAreaFrequencies.setText(frequencies);

        }
        else
        {
            int[] fixedFreqValues = RFIDMainDlg.rfidBase.getMyReader().ReaderCapabilities.getFixedFreqValues();
            for(int index = 0; index < fixedFreqValues.length; index++)
                jComboBoxTransmitFrequency.addItem(String.valueOf(fixedFreqValues[index]));
        }

        // Add antennas
        for (int index = 0; index < antennaList.length; index++)
            jComboBoxAntennaID.addItem(String.valueOf(antennaList[index]));

        
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabelTxFrequency = new javax.swing.JLabel();
        jComboBoxAntennaID = new javax.swing.JComboBox();
        jComboBoxReceiveSensitivity = new javax.swing.JComboBox();
        jComboBoxTransmitPower = new javax.swing.JComboBox();
        jComboBoxTransmitFrequency = new javax.swing.JComboBox();
        jLabel5 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTextAreaFrequencies = new javax.swing.JTextArea();
        jButtonApply = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Antenna Config");
        setResizable(false);

        jLabel1.setText("Antenna ID");

        jLabel2.setText("Receive Sensitivity(dB)");

        jLabel3.setText("Transmit Power (dBm)");

        jLabelTxFrequency.setText("Transmit Frequency");

        jComboBoxAntennaID.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(ItemEvent evt) {
                jComboBoxAntennaIDItemStateChanged(evt);
            }
        });

        jLabel5.setText("Frequencies");

        jTextAreaFrequencies.setColumns(20);
        jTextAreaFrequencies.setEditable(false);
        jTextAreaFrequencies.setLineWrap(true);
        jTextAreaFrequencies.setRows(5);
        jScrollPane1.setViewportView(jTextAreaFrequencies);

        jButtonApply.setText("Apply");
        jButtonApply.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonApplyActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 207, Short.MAX_VALUE)
                    .addComponent(jLabel5, javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabelTxFrequency)
                            .addComponent(jLabel3)
                            .addComponent(jLabel2)
                            .addComponent(jLabel1))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 28, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(jComboBoxTransmitFrequency, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jComboBoxAntennaID, javax.swing.GroupLayout.Alignment.LEADING, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jComboBoxTransmitPower, javax.swing.GroupLayout.Alignment.LEADING, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jComboBoxReceiveSensitivity, javax.swing.GroupLayout.Alignment.LEADING, 0, 69, Short.MAX_VALUE)))
                    .addComponent(jButtonApply))
                .addGap(21, 21, 21))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(jComboBoxAntennaID, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(jComboBoxReceiveSensitivity, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(jComboBoxTransmitPower, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabelTxFrequency)
                    .addComponent(jComboBoxTransmitFrequency, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(31, 31, 31)
                .addComponent(jLabel5)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jButtonApply)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButtonApplyActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonApplyActionPerformed
          try {
            int antennaID = jComboBoxAntennaID.getSelectedIndex();
            antennaID += 1;
            Config antennaConfig = RFIDMainDlg.rfidBase.getMyReader().Config.Antennas.getAntennaConfig(antennaID);
            antennaConfig.setReceiveSensitivityIndex((short)jComboBoxReceiveSensitivity.getSelectedIndex());
            short txFreqIndex = (short)jComboBoxTransmitFrequency.getSelectedIndex();
            txFreqIndex++;
            antennaConfig.setTransmitFrequencyIndex(txFreqIndex);
            antennaConfig.setTransmitPowerIndex((short)jComboBoxTransmitPower.getSelectedIndex());
            RFIDMainDlg.rfidBase.getMyReader().Config.Antennas.setAntennaConfig(antennaID, antennaConfig);
            RFIDMainDlg.rfidBase.postStatusNotification(RFIDBase.API_SUCCESS, null);
        } catch (InvalidUsageException ex) {
            RFIDMainDlg.rfidBase.postStatusNotification(RFIDBase.PARAM_ERROR, ex.getVendorMessage());
        } catch (OperationFailureException ex) {
            RFIDMainDlg.rfidBase.postStatusNotification(ex.getStatusDescription(), ex.getVendorMessage());
        }
    }//GEN-LAST:event_jButtonApplyActionPerformed

    private void jComboBoxAntennaIDItemStateChanged(ItemEvent evt) {//GEN-FIRST:event_jComboBoxAntennaIDItemStateChanged

        if (evt.getStateChange() == ItemEvent.SELECTED)
        {
            try {
                int antennaID = jComboBoxAntennaID.getSelectedIndex();
                int receiveSensitivityIndex = 0;
                int txPowerIndex = 0;
                int txFreqIndex = 0;

                antennaID++;
                Config antennaConfig = RFIDMainDlg.rfidBase.getMyReader().Config.Antennas.getAntennaConfig(antennaID);
                antennaID--;


                receiveSensitivityIndex = antennaConfig.getReceiveSensitivityIndex();
                txPowerIndex = antennaConfig.getTransmitPowerIndex();
                txFreqIndex = antennaConfig.getTransmitFrequencyIndex();

                // 1 based index so reduce 1
                if (txFreqIndex > 0)
                    txFreqIndex--;

                jComboBoxReceiveSensitivity.setSelectedIndex(receiveSensitivityIndex);
                jComboBoxTransmitPower.setSelectedIndex(txPowerIndex);
                jComboBoxTransmitFrequency.setSelectedIndex(txFreqIndex);

                // if frequency hopping enabled, show hop table else transmit frequency table
                if (RFIDMainDlg.rfidBase.getMyReader().ReaderCapabilities.isHoppingEnabled())
                {
                    FrequencyHopTable frequencyHopTablesInfo = RFIDMainDlg.rfidBase.getMyReader().ReaderCapabilities.FrequencyHopInfo.getFrepuencyHopTablesInfo(txFreqIndex);
                    int[] frequencyHopValues = frequencyHopTablesInfo.getFrequencyHopValues();

                    String frequencies = "";
                    for (int index = 0; index < frequencyHopValues.length; index++)
                        frequencies += String.valueOf(frequencyHopValues[index]) + ", ";

                    frequencies = frequencies.substring(0, frequencies.length() - 2);
                    jTextAreaFrequencies.setText(frequencies);
                }
                else
                {
                    int[] fixedFreqValues = RFIDMainDlg.rfidBase.getMyReader().ReaderCapabilities.getFixedFreqValues();
                    for(int index = 0; index < fixedFreqValues.length; index++)
                        jComboBoxTransmitFrequency.addItem(String.valueOf(fixedFreqValues[index]));
                }



            } catch (InvalidUsageException ex) {
                RFIDMainDlg.rfidBase.postStatusNotification(RFIDBase.PARAM_ERROR, ex.getVendorMessage());
            } catch (OperationFailureException ex) {
                RFIDMainDlg.rfidBase.postStatusNotification(ex.getStatusDescription(), ex.getVendorMessage());
            }
        }
    }//GEN-LAST:event_jComboBoxAntennaIDItemStateChanged

    /**
    * @param args the command line arguments
    */
    public static void main(String args[]) {
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                AntennaConfigDlg dialog = new AntennaConfigDlg(new javax.swing.JFrame(), true);
                dialog.addWindowListener(new java.awt.event.WindowAdapter() {
                    public void windowClosing(java.awt.event.WindowEvent e) {
                        System.exit(0);
                    }
                });
                dialog.setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButtonApply;
    private javax.swing.JComboBox jComboBoxAntennaID;
    private javax.swing.JComboBox jComboBoxReceiveSensitivity;
    private javax.swing.JComboBox jComboBoxTransmitFrequency;
    private javax.swing.JComboBox jComboBoxTransmitPower;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabelTxFrequency;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextArea jTextAreaFrequencies;
    // End of variables declaration//GEN-END:variables

}
