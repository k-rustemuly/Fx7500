/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * AntennaSelection.java
 *
 * Created on May 3, 2011, 8:48:48 PM
 */

import com.mot.rfid.api3.AntennaInfo;
import java.awt.Component;
import java.awt.Container;
import java.awt.GridLayout;
import java.awt.event.ItemEvent;
import java.util.ArrayList;
import javax.swing.JCheckBox;
import javax.swing.LayoutStyle;

/**
 *
 * @author CFRN78
 */
public class AntennaSelection extends javax.swing.JDialog {
    AntennaInfo antennaInfo;
    int numOfAntennas;
    private JCheckBox[] jCheckBoxArray;
    
    /** Creates new form AntennaSelection */
    public AntennaSelection(java.awt.Frame parent, boolean modal) {
        super(parent, modal);
        //initComponents();
        antennaInfo = RFIDMainDlg.rfidBase.antennaInfo;

        numOfAntennas = RFIDMainDlg.rfidBase.getMyReader().ReaderCapabilities.getNumAntennaSupported();
        jCheckBoxArray = new JCheckBox[numOfAntennas];
        for (int index = 0; index < numOfAntennas; index++)
        {
            jCheckBoxArray[index] = new JCheckBox();
            jCheckBoxArray[index].setText(Integer.toString(index+1));
        }   
        //
        init(numOfAntennas);
        // Set anntennas visible to false
        for (int index = 0; index < numOfAntennas; index++)
            setAntennaPortState(index, false, false);

//         Show only available antennas
        for (int index = 0; index < numOfAntennas; index++)
                setAntennaPortState(index, true, false);

//         Set the available antennas only
        short[] antennaSelected = antennaInfo.getAntennaID();
        if (antennaSelected != null)
        {
            for (int index = 0; index < antennaSelected.length; index++)
            {
                if ((antennaSelected[index]-1) < numOfAntennas)
                {
                    setAntennaPortState(antennaSelected[index]-1, true, true);
                }
            }
        }
        else
        {
            // Show only available antennas
            for (int index = 1; index < numOfAntennas; index++)
                    setAntennaPortState(index, true, true);

            jCheckBoxSelectAll.setSelected(true);
        }
    }

    void setAntennaPortState(int port, boolean isVisible, boolean isSelected)
    {
        JCheckBox jChkBox = jCheckBoxArray[port]; // since it is zero based index
        jChkBox.setSelected(isSelected);
        jChkBox.setVisible(isVisible);
    }
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {


        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Antenna Info");
        setResizable(false);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 471, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 440, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents
    
    private void init(int numOfAntennas)
    {
        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Antenna Info");
        setSize(300,300);// set panel size
        jPanel1 = new javax.swing.JPanel();
        jButtonApply = new javax.swing.JButton();
        jCheckBoxSelectAll = new JCheckBox();
        jPanel1.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        jButtonApply.setText("Apply");
        jButtonApply.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonApplyActionPerformed(evt);
            }
        });

        jCheckBoxSelectAll.setText("Select/Unselect All");
        jCheckBoxSelectAll.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(ItemEvent evt) {
                jCheckBoxSelectAllItemStateChanged(evt);
            }
        });
        jCheckBoxSelectAll.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCheckBoxSelectAllActionPerformed(evt);
            }
        });

        Container contentPane = this.getContentPane();
        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(contentPane);
        
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                .addGap(20, 20, 20)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jButtonApply)
                        .addGap(20, 20, 20)
                        .addComponent(jCheckBoxSelectAll)))
                .addContainerGap(44, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                .addComponent(jButtonApply)
                    .addComponent(jCheckBoxSelectAll))
                .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(60, Short.MAX_VALUE))
        );
        getContentPane().setLayout(layout);
        //
        javax.swing.GroupLayout layoutPanel = new javax.swing.GroupLayout(jPanel1);
        layoutPanel.setAutoCreateGaps(true);
        jPanel1.setLayout(layoutPanel);
        javax.swing.GroupLayout.SequentialGroup hgrp = layoutPanel.createSequentialGroup();
        javax.swing.GroupLayout.SequentialGroup vgrp = layoutPanel.createSequentialGroup();
        //
        int col = 20;
        int row = numOfAntennas/col;
        int colModulo = 0;
        if((numOfAntennas % col) > 0)
        {
            row++;
            colModulo = numOfAntennas % col;
        }
        if(numOfAntennas < 20)
        {
            row = 1;
            col = numOfAntennas;
        }
        javax.swing.GroupLayout.ParallelGroup [] phgrp = new javax.swing.GroupLayout.ParallelGroup[col];
        for(int i=0;i<col;i++)
            phgrp[i] = layoutPanel.createParallelGroup();
        javax.swing.GroupLayout.ParallelGroup [] pvgrp = new javax.swing.GroupLayout.ParallelGroup[row];
        for(int i=0;i<row;i++)
            pvgrp[i] = layoutPanel.createParallelGroup();
        if(colModulo == 0)
        {
            for (int j = 0; j < row; j++) 
            {
                for (int k = 0; k < col; k++)
                {
                    phgrp[k].addComponent(jCheckBoxArray[j*col+k]);
                    pvgrp[j].addComponent(jCheckBoxArray[j*col+k]);
                }
            }            
        }
        else
        {
            int j;
            for (j = 0; j < row-1; j++) 
            {
                for (int k = 0; k < col; k++)
                {
                    phgrp[k].addComponent(jCheckBoxArray[j*col+k]);
                    pvgrp[j].addComponent(jCheckBoxArray[j*col+k]);
                }
            }
            for (int k = 0; k < colModulo; k++)
            {
                phgrp[k].addComponent(jCheckBoxArray[j*col+k]);
                pvgrp[j].addComponent(jCheckBoxArray[j*col+k]);
            }

        }
        for(int i=0;i<col;i++)
            hgrp.addGroup(phgrp[i]);
        layoutPanel.setHorizontalGroup(hgrp);
        for(int i=0;i<row;i++)
            vgrp.addGroup(pvgrp[i]);
        layoutPanel.setVerticalGroup(vgrp);
        jPanel1.setLayout(layoutPanel);
        contentPane.revalidate();
        contentPane.repaint();
        pack();
    }

    private void jButtonApplyActionPerformed(java.awt.event.ActionEvent evt) {                                             

        JCheckBox jChkBox;
        ArrayList selectedAntennas = new ArrayList();
        for (int index = 0; index < jCheckBoxArray.length; index++)
        {
            jChkBox = jCheckBoxArray[index];
            if(jChkBox != null)
        {
            if (jChkBox.isSelected())
            {
                    selectedAntennas.add(String.valueOf(index+1));
                }
            }
        }

        if (selectedAntennas.size() > 0)
        {
            short[] myAntennas = new short[selectedAntennas.size()];

            for (int index = 0; index < selectedAntennas.size(); index++)
            {
                myAntennas[index] = Short.parseShort((String)selectedAntennas.get(index));;
            }
            antennaInfo.setAntennaID(myAntennas);
        }
        else
            antennaInfo.setAntennaID(null);
    }                                            

    private void jCheckBoxSelectAllActionPerformed(java.awt.event.ActionEvent evt) {                                                   
        // TODO add your handling code here:
    }                                                  

    private void jCheckBoxSelectAllItemStateChanged(ItemEvent evt) {
        if (evt.getStateChange() == ItemEvent.SELECTED)
        {
            for (int index = 0; index < numOfAntennas; index++)
                setAntennaPortState(index, true, true);
        }
        else
        {
            for (int index = 0; index < numOfAntennas; index++)
                setAntennaPortState(index, true, false);
        }
    }    
    /**
    * @param args the command line arguments
    */
    public static void main(String args[]) {
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                AntennaSelection dialog = new AntennaSelection(new javax.swing.JFrame(), true);
                dialog.addWindowListener(new java.awt.event.WindowAdapter() {
                    public void windowClosing(java.awt.event.WindowEvent e) {
                        System.exit(0);
                    }
                });
                dialog.setVisible(true);
            }
        });
    }
    // Variables declaration - do not modify                     
    private javax.swing.JButton jButtonApply;
    private JCheckBox jCheckBoxSelectAll;
    private javax.swing.JPanel jPanel1;
    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables

}
