/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * TagStorageSettingsDlg.java
 *
 * Created on May 2, 2011, 5:18:30 PM
 */

import com.mot.rfid.api3.InvalidUsageException;
import com.mot.rfid.api3.OperationFailureException;
import com.mot.rfid.api3.TAG_FIELD;
import com.mot.rfid.api3.TagStorageSettings;

/**
 *
 * @author CFRN78
 */
public class TagStorageSettingsDlg extends javax.swing.JDialog {

    /** Creates new form TagStorageSettingsDlg */
    public TagStorageSettingsDlg(java.awt.Frame parent, boolean modal) {
        super(parent, modal);
        initComponents();
        try {
            TagStorageSettings tagStorageSettings = RFIDMainDlg.rfidBase.getMyReader().Config.getTagStorageSettings();
            jTextMaxTagCount.setText(String.valueOf(tagStorageSettings.getMaxTagCount()));
            jTextMaxTagIdLength.setText(String.valueOf(tagStorageSettings.getMaxTagIDLength()));
            jTextMaxSizeMemBank.setText(String.valueOf(tagStorageSettings.getMaxMemoryBankByteCount()));
            
            if(RFIDMainDlg.rfidBase.getTagStorageSettingsPhasInfoEnabled() == true)
            {
                jCheckBoxPhaseInfo.setSelected(true);
            }
        } catch (InvalidUsageException ex) {
            RFIDMainDlg.rfidBase.postStatusNotification(RFIDBase.PARAM_ERROR, ex.getVendorMessage());
        } catch (OperationFailureException ex) {
            RFIDMainDlg.rfidBase.postStatusNotification(ex.getStatusDescription(), ex.getVendorMessage());
        }

    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jTextMaxTagCount = new javax.swing.JTextField();
        jTextMaxTagIdLength = new javax.swing.JTextField();
        jTextMaxSizeMemBank = new javax.swing.JTextField();
        jButtonApply = new javax.swing.JButton();
        jLabel4 = new javax.swing.JLabel();
        jCheckBoxPhaseInfo = new javax.swing.JCheckBox();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Tag Storage Settings");
        setResizable(false);

        jLabel1.setText("Max Tag Count");

        jLabel2.setText("Max Tag ID length");

        jLabel3.setText("Max size of Memory Bank");

        jButtonApply.setText("Apply");
        jButtonApply.setActionCommand("Apply");
        jButtonApply.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonApplyActionPerformed(evt);
            }
        });

        jLabel4.setText("Tag Field");

        jCheckBoxPhaseInfo.setText("Phase Info");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel1)
                            .addComponent(jLabel3)
                    .addComponent(jLabel2)
                    		.addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 55, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 7, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jButtonApply, javax.swing.GroupLayout.DEFAULT_SIZE, 80, Short.MAX_VALUE)
                    .addComponent(jCheckBoxPhaseInfo)
                    .addComponent(jTextMaxSizeMemBank, javax.swing.GroupLayout.DEFAULT_SIZE, 80, Short.MAX_VALUE)
                            .addComponent(jTextMaxTagIdLength)
                    .addComponent(jTextMaxTagCount))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap(17, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(jTextMaxTagCount, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(jTextMaxTagIdLength, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(jTextMaxSizeMemBank, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jCheckBoxPhaseInfo))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButtonApply)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButtonApplyActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonApplyActionPerformed

        try {
            TagStorageSettings tagStorageSettings = RFIDMainDlg.rfidBase.getMyReader().Config.getTagStorageSettings();
            tagStorageSettings.setMaxTagCount(Integer.parseInt(jTextMaxTagCount.getText()));
            tagStorageSettings.setMaxTagIDLength(Integer.parseInt(jTextMaxTagIdLength.getText()));
            tagStorageSettings.setMaxMemoryBankByteCount(Integer.parseInt(jTextMaxSizeMemBank.getText()));
            if(jCheckBoxPhaseInfo.isSelected()) 
            {
                RFIDMainDlg.rfidBase.setTagStorageSettingsPhasInfoEnabled(true);
                TAG_FIELD[] arrT = tagStorageSettings.getTagFields();
                boolean bPhaseEnabled = false;
                for(int idx=0;idx<arrT.length;idx++)
                {
                    if(arrT[idx].equals(TAG_FIELD.PHASE_INFO))
                        bPhaseEnabled = true;
                }
                if(!bPhaseEnabled)
                {
                    TAG_FIELD[] arrF = new  TAG_FIELD[arrT.length+1];
                    System.arraycopy(arrT, 0, arrF, 0, arrT.length);
                    arrF[arrT.length] = TAG_FIELD.PHASE_INFO;
                    tagStorageSettings.setTagFields(arrF);
                }
            }
            else
            {
                RFIDMainDlg.rfidBase.setTagStorageSettingsPhasInfoEnabled(false);
            }
            RFIDMainDlg.rfidBase.getMyReader().Config.setTagStorageSettings(tagStorageSettings);
            
            RFIDMainDlg.rfidBase.postStatusNotification(RFIDBase.API_SUCCESS, null);
            
            RFIDMainDlg.rfidBase.mainApp.clearReports();
                    
        } catch (InvalidUsageException ex) {
            RFIDMainDlg.rfidBase.postStatusNotification(RFIDBase.PARAM_ERROR, ex.getVendorMessage());
        } catch (OperationFailureException ex) {
            RFIDMainDlg.rfidBase.postStatusNotification(ex.getStatusDescription(), ex.getVendorMessage());
        }
        // End the dialog
        this.dispose();

    }//GEN-LAST:event_jButtonApplyActionPerformed

    /**
    * @param args the command line arguments
    */
    public static void main(String args[]) {
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                TagStorageSettingsDlg dialog = new TagStorageSettingsDlg(new javax.swing.JFrame(), true);
                dialog.addWindowListener(new java.awt.event.WindowAdapter() {
                    public void windowClosing(java.awt.event.WindowEvent e) {
                        System.exit(0);
                    }
                });
                dialog.setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButtonApply;
    private javax.swing.JCheckBox jCheckBoxPhaseInfo;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JTextField jTextMaxSizeMemBank;
    private javax.swing.JTextField jTextMaxTagCount;
    private javax.swing.JTextField jTextMaxTagIdLength;
    // End of variables declaration//GEN-END:variables

}
