/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * AntennaSelection.java
 *
 * Created on May 3, 2011, 8:48:48 PM
 */

import com.mot.rfid.api3.AntennaInfo;
import com.mot.rfid.api3.GPO_PORT_STATE;
import com.mot.rfid.api3.InvalidUsageException;
import com.mot.rfid.api3.OperationFailureException;
import java.awt.Component;
import java.awt.event.ItemEvent;
import java.util.ArrayList;
import javax.swing.JCheckBox;

/**
 *
 * @author CFRN78
 */
public class GPIOConfigDlg extends javax.swing.JDialog {
    AntennaInfo antennaInfo;
    int numOfGPIS;
    int numOfGPOS;

    /** Creates new form AntennaSelection */
    public GPIOConfigDlg(java.awt.Frame parent, boolean modal) {
        super(parent, modal);
        initComponents();

        // GPI Port State
        initGPIState();

        // GPO Port State
        initGPOState();

    }

    void initGPIState()
    {
        numOfGPIS = RFIDMainDlg.rfidBase.getMyReader().ReaderCapabilities.getNumGPIPorts();

        // Hide all the GPI ports
        for (int index = 0; index < 10; index++)
        {
            JCheckBox jCheckBoxGPIState;
            jCheckBoxGPIState = (JCheckBox)jPanelGPIState.getComponent(index);
            jCheckBoxGPIState.setVisible(false);
        }

        // Show only available GPI
        for (int index = 0; index < numOfGPIS; index++)
        {
            JCheckBox jCheckBoxGPIState;
            jCheckBoxGPIState = (JCheckBox)jPanelGPIState.getComponent(index);
            jCheckBoxGPIState.setVisible(true);
        }

        // Set the check if it is enabled in the reader
        for (int index = 0; index < numOfGPIS; index++)
        {
            JCheckBox jCheckBoxGPIState;
            jCheckBoxGPIState = (JCheckBox)jPanelGPIState.getComponent(index);

            try {
                if (RFIDMainDlg.rfidBase.getMyReader().Config.GPI.isPortEnabled(index + 1)) {
                    jCheckBoxGPIState.setSelected(true);
                } else {
                    jCheckBoxGPIState.setSelected(false);
                }
            } catch (InvalidUsageException ex) {
                //ex.printStackTrace();
            } catch (OperationFailureException ex) {
                //ex.printStackTrace();
            }
        }

    }

    void initGPOState()
    {
        numOfGPOS = RFIDMainDlg.rfidBase.getMyReader().ReaderCapabilities.getNumGPOPorts();

        // Hide all the GPO ports
        for (int index = 0; index < 10; index++)
        {
            JCheckBox jCheckBoxGPOState;
            jCheckBoxGPOState = (JCheckBox)jPanelGPOState.getComponent(index);
            jCheckBoxGPOState.setVisible(false);
        }

        // Show only available GPO
        for (int index = 0; index < numOfGPOS; index++)
        {
            JCheckBox jCheckBoxGPOState;
            jCheckBoxGPOState = (JCheckBox)jPanelGPOState.getComponent(index);
            jCheckBoxGPOState.setVisible(true);
        }

        // Set the check if it is enabled in the reader
        for (int index = 0; index < numOfGPOS; index++)
        {
            JCheckBox jCheckBoxGPOState;
            jCheckBoxGPOState = (JCheckBox)jPanelGPOState.getComponent(index);

            try {
                if (RFIDMainDlg.rfidBase.getMyReader().Config.GPO.getPortState(index + 1) == GPO_PORT_STATE.TRUE) {
                    jCheckBoxGPOState.setSelected(true);
                } else {
                    jCheckBoxGPOState.setSelected(false);
                }
            } catch (InvalidUsageException ex) {
                //ex.printStackTrace();
            } catch (OperationFailureException ex) {
                //ex.printStackTrace();
            }
        }

    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanelGPIState = new javax.swing.JPanel();
        jCheckBox7 = new JCheckBox();
        jCheckBox8 = new JCheckBox();
        jCheckBox6 = new JCheckBox();
        jCheckBox5 = new JCheckBox();
        jCheckBox4 = new JCheckBox();
        jCheckBox3 = new JCheckBox();
        jCheckBox2 = new JCheckBox();
        jCheckBox1 = new JCheckBox();
        jCheckBox19 = new JCheckBox();
        jCheckBox21 = new JCheckBox();
        jButtonApply = new javax.swing.JButton();
        jPanelGPOState = new javax.swing.JPanel();
        jCheckBox9 = new JCheckBox();
        jCheckBox10 = new JCheckBox();
        jCheckBox11 = new JCheckBox();
        jCheckBox12 = new JCheckBox();
        jCheckBox13 = new JCheckBox();
        jCheckBox14 = new JCheckBox();
        jCheckBox15 = new JCheckBox();
        jCheckBox16 = new JCheckBox();
        jCheckBox17 = new JCheckBox();
        jCheckBox18 = new JCheckBox();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("GPIO settings");
        setResizable(false);

        jPanelGPIState.setBorder(javax.swing.BorderFactory.createTitledBorder("GPI Enable"));

        jCheckBox7.setText("7");

        jCheckBox8.setLabel("10");

        jCheckBox6.setText("6");

        jCheckBox5.setText("5");

        jCheckBox4.setText("4");

        jCheckBox3.setText("3");

        jCheckBox2.setText("2");

        jCheckBox1.setText("1");

        jCheckBox19.setText("8");

        jCheckBox21.setLabel("9");

        javax.swing.GroupLayout jPanelGPIStateLayout = new javax.swing.GroupLayout(jPanelGPIState);
        jPanelGPIState.setLayout(jPanelGPIStateLayout);
        jPanelGPIStateLayout.setHorizontalGroup(
            jPanelGPIStateLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelGPIStateLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jCheckBox1, javax.swing.GroupLayout.DEFAULT_SIZE, 37, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jCheckBox2, javax.swing.GroupLayout.DEFAULT_SIZE, 37, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jCheckBox3, javax.swing.GroupLayout.DEFAULT_SIZE, 37, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jCheckBox4, javax.swing.GroupLayout.DEFAULT_SIZE, 37, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jCheckBox5, javax.swing.GroupLayout.DEFAULT_SIZE, 37, Short.MAX_VALUE)
                .addGap(3, 3, 3)
                .addComponent(jCheckBox6, javax.swing.GroupLayout.DEFAULT_SIZE, 37, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jCheckBox7, javax.swing.GroupLayout.DEFAULT_SIZE, 37, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jCheckBox19, javax.swing.GroupLayout.DEFAULT_SIZE, 37, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jCheckBox21, javax.swing.GroupLayout.DEFAULT_SIZE, 37, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jCheckBox8, javax.swing.GroupLayout.DEFAULT_SIZE, 43, Short.MAX_VALUE)
                .addGap(22, 22, 22))
        );
        jPanelGPIStateLayout.setVerticalGroup(
            jPanelGPIStateLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelGPIStateLayout.createSequentialGroup()
                .addGap(7, 7, 7)
                .addGroup(jPanelGPIStateLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                    .addComponent(jCheckBox1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jCheckBox2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jCheckBox3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jCheckBox4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jCheckBox5, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jCheckBox6, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jCheckBox7, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jCheckBox8)
                    .addComponent(jCheckBox19, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jCheckBox21, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );

        jButtonApply.setText("Apply");
        jButtonApply.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonApplyActionPerformed(evt);
            }
        });

        jPanelGPOState.setBorder(javax.swing.BorderFactory.createTitledBorder("GPO State"));

        jCheckBox9.setText("7");

        jCheckBox10.setText("8");

        jCheckBox11.setText("6");

        jCheckBox12.setText("5");

        jCheckBox13.setText("4");

        jCheckBox14.setText("3");

        jCheckBox15.setText("2");

        jCheckBox16.setText("1");

        jCheckBox17.setLabel("10");

        jCheckBox18.setLabel("9");

        javax.swing.GroupLayout jPanelGPOStateLayout = new javax.swing.GroupLayout(jPanelGPOState);
        jPanelGPOState.setLayout(jPanelGPOStateLayout);
        jPanelGPOStateLayout.setHorizontalGroup(
            jPanelGPOStateLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelGPOStateLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jCheckBox16, javax.swing.GroupLayout.DEFAULT_SIZE, 41, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jCheckBox15, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jCheckBox14, javax.swing.GroupLayout.DEFAULT_SIZE, 41, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jCheckBox13, javax.swing.GroupLayout.DEFAULT_SIZE, 38, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jCheckBox12, javax.swing.GroupLayout.DEFAULT_SIZE, 39, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jCheckBox11, javax.swing.GroupLayout.DEFAULT_SIZE, 37, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jCheckBox9, javax.swing.GroupLayout.DEFAULT_SIZE, 40, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jCheckBox10, javax.swing.GroupLayout.DEFAULT_SIZE, 40, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jCheckBox18, javax.swing.GroupLayout.DEFAULT_SIZE, 40, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jCheckBox17, javax.swing.GroupLayout.DEFAULT_SIZE, 40, Short.MAX_VALUE)
                .addGap(16, 16, 16))
        );
        jPanelGPOStateLayout.setVerticalGroup(
            jPanelGPOStateLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelGPOStateLayout.createSequentialGroup()
                .addGap(7, 7, 7)
                .addGroup(jPanelGPOStateLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                    .addComponent(jCheckBox16, javax.swing.GroupLayout.DEFAULT_SIZE, 33, Short.MAX_VALUE)
                    .addComponent(jCheckBox15, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jCheckBox14, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jCheckBox13, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jCheckBox12, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jCheckBox11, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jCheckBox9, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jCheckBox10, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jCheckBox17, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jCheckBox18, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 221, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jButtonApply))
                    .addComponent(jPanelGPIState, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanelGPOState, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(20, 20, 20))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jPanelGPOState, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jPanelGPIState, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jButtonApply)
                .addGap(23, 23, 23))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButtonApplyActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonApplyActionPerformed

        // Set the GPO State
        for (int index = 0; index < numOfGPOS; index++)
        {
            JCheckBox jCheckBoxGPOState;
            jCheckBoxGPOState = (JCheckBox)jPanelGPOState.getComponent(index);

            try {
                if (jCheckBoxGPOState.isSelected())
                    RFIDMainDlg.rfidBase.getMyReader().Config.GPO.setPortState(index + 1, GPO_PORT_STATE.TRUE);
                else
                    RFIDMainDlg.rfidBase.getMyReader().Config.GPO.setPortState(index + 1, GPO_PORT_STATE.FALSE);

                RFIDMainDlg.rfidBase.postStatusNotification(RFIDBase.API_SUCCESS, null);

            } catch (InvalidUsageException ex) {
                RFIDMainDlg.rfidBase.postStatusNotification(RFIDBase.PARAM_ERROR, ex.getVendorMessage());
            } catch (OperationFailureException ex) {
                RFIDMainDlg.rfidBase.postStatusNotification(ex.getStatusDescription(), ex.getVendorMessage());
            }
        }


        // Set the GPI Port Enable/Disable
        for (int index = 0; index < numOfGPIS; index++)
        {
            JCheckBox jCheckBoxGPIState;
            jCheckBoxGPIState = (JCheckBox)jPanelGPIState.getComponent(index);

            try {
                if (jCheckBoxGPIState.isSelected())
                    RFIDMainDlg.rfidBase.getMyReader().Config.GPI.enablePort(index + 1, true);
                else
                    RFIDMainDlg.rfidBase.getMyReader().Config.GPI.enablePort(index + 1, false);

                RFIDMainDlg.rfidBase.postStatusNotification(RFIDBase.API_SUCCESS, null);

            } catch (InvalidUsageException ex) {
                RFIDMainDlg.rfidBase.postStatusNotification(RFIDBase.PARAM_ERROR, ex.getVendorMessage());
            } catch (OperationFailureException ex) {
                RFIDMainDlg.rfidBase.postStatusNotification(ex.getStatusDescription(), ex.getVendorMessage());
            }
        }


    }//GEN-LAST:event_jButtonApplyActionPerformed

    /**
    * @param args the command line arguments
    */
    public static void main(String args[]) {
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                GPIOConfigDlg dialog = new GPIOConfigDlg(new javax.swing.JFrame(), true);
                dialog.addWindowListener(new java.awt.event.WindowAdapter() {
                    public void windowClosing(java.awt.event.WindowEvent e) {
                        System.exit(0);
                    }
                });
                dialog.setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButtonApply;
    private JCheckBox jCheckBox1;
    private JCheckBox jCheckBox10;
    private JCheckBox jCheckBox11;
    private JCheckBox jCheckBox12;
    private JCheckBox jCheckBox13;
    private JCheckBox jCheckBox14;
    private JCheckBox jCheckBox15;
    private JCheckBox jCheckBox16;
    private JCheckBox jCheckBox17;
    private JCheckBox jCheckBox18;
    private JCheckBox jCheckBox19;
    private JCheckBox jCheckBox2;
    private JCheckBox jCheckBox21;
    private JCheckBox jCheckBox3;
    private JCheckBox jCheckBox4;
    private JCheckBox jCheckBox5;
    private JCheckBox jCheckBox6;
    private JCheckBox jCheckBox7;
    private JCheckBox jCheckBox8;
    private JCheckBox jCheckBox9;
    private javax.swing.JPanel jPanelGPIState;
    private javax.swing.JPanel jPanelGPOState;
    // End of variables declaration//GEN-END:variables

}
