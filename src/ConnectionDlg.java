/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * Connection.java
 *
 * Created on Apr 29, 2011, 1:21:59 PM
 */

import com.mot.rfid.api3.SecureConnectionInfo;
import java.io.FileReader;

/**
 *
 * @author CFRN78
 */
public class ConnectionDlg extends javax.swing.JDialog {

    /** Creates new form Connection */
    public ConnectionDlg(java.awt.Frame parent, boolean modal) {
        super(parent, modal);
        initComponents();

        jTextField1.setText(RFIDMainDlg.rfidBase.hostName);
        jTextField2.setText(Integer.toString(RFIDMainDlg.rfidBase.port));
        
        CertficateFileTextBox.setText(RFIDMainDlg.rfidBase.m_strClientCertFilePath);
        PrivateKeyFilePathTextBox.setText(RFIDMainDlg.rfidBase.m_strClientKeyFilePath);
        KeyPassPhrase.setText(RFIDMainDlg.rfidBase.m_strKeyPassword);
        RootCertFileFileTextBox.setText(RFIDMainDlg.rfidBase.m_strRootCertFilePath);

        jCheckBoxSecureConnection.setSelected(RFIDMainDlg.rfidBase.m_bSecureConnection);
        jCheckBoxValidatePeerCert.setSelected(RFIDMainDlg.rfidBase.m_bValidatePeer);

        if (RFIDMainDlg.rfidBase.getMyReader().isConnected() == true)
        {
             jTextField1.setEnabled(false);
             jTextField2.setEnabled(false);
             jButtonConnect.setText("Disconnect");
             jCheckBoxSecureConnection.setEnabled(false);
        }
        else if (RFIDMainDlg.rfidBase.m_bSecureConnection) 
        {
            jCheckBoxValidatePeerCert.setEnabled(true);
            CertficateFileTextBox.setEnabled(true);
            CertificateFileBrowseButton.setEnabled(true);
            PrivateKeyFilePathTextBox.setEnabled(true);
            PrivateKeyFileBrowseButton.setEnabled(true);
            RootCertFileFileTextBox.setEnabled(true);
            RootCertFileBrowseButton.setEnabled(true);
            KeyPassPhrase.setEnabled(true);
            return;
        }
         jCheckBoxValidatePeerCert.setEnabled(false);
        CertficateFileTextBox.setEnabled(false);
        CertificateFileBrowseButton.setEnabled(false);
        PrivateKeyFilePathTextBox.setEnabled(false);
        PrivateKeyFileBrowseButton.setEnabled(false);
        RootCertFileFileTextBox.setEnabled(false);
        RootCertFileBrowseButton.setEnabled(false);
        KeyPassPhrase.setEnabled(false);
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jTextField1 = new javax.swing.JTextField();
        jButtonConnect = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        jTextField2 = new javax.swing.JTextField();
        jCheckBoxSecureConnection = new javax.swing.JCheckBox();
        jCheckBoxValidatePeerCert = new javax.swing.JCheckBox();
        jLabel3 = new javax.swing.JLabel();
        CertficateFileTextBox = new javax.swing.JTextField();
        CertificateFileBrowseButton = new javax.swing.JButton();
        jLabel4 = new javax.swing.JLabel();
        PrivateKeyFilePathTextBox = new javax.swing.JTextField();
        PrivateKeyFileBrowseButton = new javax.swing.JButton();
        jLabel5 = new javax.swing.JLabel();
        KeyPassPhrase = new javax.swing.JPasswordField();
        jLabel7 = new javax.swing.JLabel();
        RootCertFileFileTextBox = new javax.swing.JTextField();
        RootCertFileBrowseButton = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Connect");
        setBounds(new java.awt.Rectangle(0, 0, 0, 0));
        setModal(true);
        setResizable(false);

        jLabel1.setText("Host Name/IP:");

        jButtonConnect.setText("Connect");
        jButtonConnect.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonConnectActionPerformed(evt);
            }
        });

        jLabel2.setText("Port:");

        jTextField2.setText("5084");

        jCheckBoxSecureConnection.setLabel(" Secure Connection");
        jCheckBoxSecureConnection.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCheckBoxSecureConnectionActionPerformed(evt);
            }
        });
        jCheckBoxSecureConnection.addAncestorListener(new javax.swing.event.AncestorListener() {
            public void ancestorMoved(javax.swing.event.AncestorEvent evt) {
            }
            public void ancestorAdded(javax.swing.event.AncestorEvent evt) {
                jCheckBoxSecureConnectionAncestorAdded(evt);
            }
            public void ancestorRemoved(javax.swing.event.AncestorEvent evt) {
            }
        });

        jCheckBoxValidatePeerCert.setText(" Validate Peer Certificate");
        jCheckBoxValidatePeerCert.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCheckBoxValidatePeerCertActionPerformed(evt);
            }
        });
        jCheckBoxValidatePeerCert.addAncestorListener(new javax.swing.event.AncestorListener() {
            public void ancestorMoved(javax.swing.event.AncestorEvent evt) {
            }
            public void ancestorAdded(javax.swing.event.AncestorEvent evt) {
                jCheckBoxValidatePeerCertAncestorAdded(evt);
            }
            public void ancestorRemoved(javax.swing.event.AncestorEvent evt) {
            }
        });

        jLabel3.setText("Certificate file: ");

        CertificateFileBrowseButton.setText("Browse");
        CertificateFileBrowseButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CertificateFileBrowseButtonActionPerformed(evt);
            }
        });

        jLabel4.setText("Private key file: ");

        PrivateKeyFileBrowseButton.setText("Browse");
        PrivateKeyFileBrowseButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                PrivateKeyFileBrowseButtonActionPerformed(evt);
            }
        });

        jLabel5.setText("Key pass phrase: ");

        KeyPassPhrase.setColumns(25);
        KeyPassPhrase.setText("jPasswordField1");

        jLabel7.setText("Root cert file: ");

        RootCertFileBrowseButton.setText("Browse");
        RootCertFileBrowseButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                RootCertFileBrowseButtonActionPerformed(evt);
            }
        });
        RootCertFileBrowseButton.addAncestorListener(new javax.swing.event.AncestorListener() {
            public void ancestorMoved(javax.swing.event.AncestorEvent evt) {
            }
            public void ancestorAdded(javax.swing.event.AncestorEvent evt) {
                RootCertFileBrowseButtonAncestorAdded(evt);
            }
            public void ancestorRemoved(javax.swing.event.AncestorEvent evt) {
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(jLabel3, javax.swing.GroupLayout.Alignment.TRAILING)
                        .addComponent(jLabel5, javax.swing.GroupLayout.Alignment.TRAILING))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(5, 5, 5)
                        .addComponent(jLabel4))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(15, 15, 15)
                        .addComponent(jLabel7)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(RootCertFileFileTextBox, javax.swing.GroupLayout.PREFERRED_SIZE, 384, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(KeyPassPhrase, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(CertficateFileTextBox)
                    .addComponent(PrivateKeyFilePathTextBox))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(CertificateFileBrowseButton, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(PrivateKeyFileBrowseButton, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(RootCertFileBrowseButton))
                .addContainerGap())
            .addGroup(layout.createSequentialGroup()
                .addGap(228, 228, 228)
                    .addComponent(jButtonConnect)
                .addContainerGap())
                    .addGroup(layout.createSequentialGroup()
                .addGap(10, 10, 10)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                            .addComponent(jLabel1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, 143, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jCheckBoxSecureConnection))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jCheckBoxValidatePeerCert)
                        .addContainerGap(115, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jTextField2)
                        .addGap(83, 83, 83))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jTextField2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel2))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jCheckBoxSecureConnection)
                    .addComponent(jCheckBoxValidatePeerCert))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(CertficateFileTextBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(CertificateFileBrowseButton))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4)
                    .addComponent(PrivateKeyFilePathTextBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(PrivateKeyFileBrowseButton))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel5)
                    .addComponent(KeyPassPhrase, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel7)
                    .addComponent(RootCertFileFileTextBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(RootCertFileBrowseButton))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jButtonConnect)
                .addContainerGap())
        );

        jCheckBoxSecureConnection.getAccessibleContext().setAccessibleName("SecureConnectionCheckBox");
        jCheckBoxValidatePeerCert.getAccessibleContext().setAccessibleName("ValidatePeerCertificateCheckBox");
        CertficateFileTextBox.getAccessibleContext().setAccessibleName("");

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private String  ReadFileContent(String strFilePath)
    {
        String strContent = "";
        String line;
        try
        {
            java.io.BufferedReader reader = new java.io.BufferedReader(new FileReader(strFilePath));
            while ((line = reader.readLine()) != null)
            {
                strContent += "\n" + line;
            }
            // Cut of the first newline;
            strContent = strContent.substring(1);
            // Close the reader
            reader.close();
            return strContent;
        }
        catch (Exception FileException)
        {
            
        }
        return null;
    }
    private void jButtonConnectActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonConnectActionPerformed
        // TODO add your handling code here:
        if (jButtonConnect.getText().equals("Connect"))
        {
            int port = Integer.parseInt(jTextField2.getText());
            
            // EMBPD00120430
            if (RFIDMainDlg.rfidBase.myReader.SecureConnectionInfo == null)
                RFIDMainDlg.rfidBase.myReader.SecureConnectionInfo = new SecureConnectionInfo();
            else
            {
                RFIDMainDlg.rfidBase.myReader.SecureConnectionInfo.setSecureMode(false);
                
                RFIDMainDlg.rfidBase.myReader.SecureConnectionInfo.setClientCertificate(null);
                RFIDMainDlg.rfidBase.myReader.SecureConnectionInfo.setClientPrivateKey(null);
                RFIDMainDlg.rfidBase.myReader.SecureConnectionInfo.setRootCertificate(null);
                RFIDMainDlg.rfidBase.myReader.SecureConnectionInfo.setPhraseInfo(null);                
            }
            
            if(RFIDMainDlg.rfidBase.m_bSecureConnection)
            {
                RFIDMainDlg.rfidBase.myReader.SecureConnectionInfo.setClientCertificate(null);
                RFIDMainDlg.rfidBase.myReader.SecureConnectionInfo.setClientPrivateKey(null);
                RFIDMainDlg.rfidBase.myReader.SecureConnectionInfo.setRootCertificate(null);
                    
                RFIDMainDlg.rfidBase.m_strClientCertFilePath = CertficateFileTextBox.getText();
                RFIDMainDlg.rfidBase.m_strClientKeyFilePath = PrivateKeyFilePathTextBox.getText();
                RFIDMainDlg.rfidBase.m_strRootCertFilePath = RootCertFileFileTextBox.getText();
                RFIDMainDlg.rfidBase.m_strKeyPassword = new String(KeyPassPhrase.getPassword());
                
                
                RFIDMainDlg.rfidBase.myReader.SecureConnectionInfo.setSecureMode(true);
                RFIDMainDlg.rfidBase.myReader.SecureConnectionInfo.setValidatePeerCerticate(RFIDMainDlg.rfidBase.m_bValidatePeer);
                if ( new java.io.File(RFIDMainDlg.rfidBase.m_strClientCertFilePath).exists())
                {
                    RFIDMainDlg.rfidBase.myReader.SecureConnectionInfo.setClientCertificate(ReadFileContent(RFIDMainDlg.rfidBase.m_strClientCertFilePath));
                }
                if ( new java.io.File(RFIDMainDlg.rfidBase.m_strClientKeyFilePath).exists())
                {
                    RFIDMainDlg.rfidBase.myReader.SecureConnectionInfo.setClientPrivateKey(ReadFileContent(RFIDMainDlg.rfidBase.m_strClientKeyFilePath));
                }
                if ( new java.io.File(RFIDMainDlg.rfidBase.m_strRootCertFilePath).exists())
                {
                    RFIDMainDlg.rfidBase.myReader.SecureConnectionInfo.setRootCertificate(ReadFileContent(RFIDMainDlg.rfidBase.m_strRootCertFilePath));
                }
                RFIDMainDlg.rfidBase.myReader.SecureConnectionInfo.setPhraseInfo(RFIDMainDlg.rfidBase.m_strKeyPassword);
            }

            if (RFIDMainDlg.rfidBase.connectToReader(jTextField1.getText(), port))
            {
                jButtonConnect.setText("Disconnect");
                this.dispose();
            }
            else
            {
                jTextField1.requestFocusInWindow();
            }
        }
        else
        {
            RFIDMainDlg.rfidBase.disconnectReader();
            jButtonConnect.setText("Connect");
            jTextField1.setEnabled(true);
            jTextField2.setEnabled(true);
            jTextField1.requestFocusInWindow();
            
            // Enable all the controls for secure connection
            jCheckBoxSecureConnection.setEnabled(true);
            if (jCheckBoxSecureConnection.isSelected())
            {
                jCheckBoxValidatePeerCert.setEnabled(true);
                CertficateFileTextBox.setEnabled(true);
                CertificateFileBrowseButton.setEnabled(true);
                PrivateKeyFilePathTextBox.setEnabled(true);
                PrivateKeyFileBrowseButton.setEnabled(true);
                KeyPassPhrase.setEnabled(true);
                RootCertFileFileTextBox.setEnabled(true);
                RootCertFileBrowseButton.setEnabled(true);
            }
        }
    }//GEN-LAST:event_jButtonConnectActionPerformed

    private void CertificateFileBrowseButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CertificateFileBrowseButtonActionPerformed
        javax.swing.JFileChooser j = new javax.swing.JFileChooser();
        j.setFileSelectionMode(javax.swing.JFileChooser.FILES_AND_DIRECTORIES);
        int retval  = j.showOpenDialog(this);// .showSaveDialog(this);
        if (retval == javax.swing.JFileChooser.APPROVE_OPTION) {
                //... The user selected a file, get it, use it.
                java.io.File file = j.getSelectedFile();
                String path = file.getAbsolutePath();
                CertficateFileTextBox.setText(path);
        }
    }//GEN-LAST:event_CertificateFileBrowseButtonActionPerformed

    private void PrivateKeyFileBrowseButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_PrivateKeyFileBrowseButtonActionPerformed
        javax.swing.JFileChooser j = new javax.swing.JFileChooser();
        j.setFileSelectionMode(javax.swing.JFileChooser.FILES_AND_DIRECTORIES);
        int retval  = j.showOpenDialog(this);// .showSaveDialog(this);
        if (retval == javax.swing.JFileChooser.APPROVE_OPTION) {
                //... The user selected a file, get it, use it.
                java.io.File file = j.getSelectedFile();
                PrivateKeyFilePathTextBox.setText(file.getAbsolutePath());
        }
    }//GEN-LAST:event_PrivateKeyFileBrowseButtonActionPerformed

    private void RootCertFileBrowseButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_RootCertFileBrowseButtonActionPerformed
        javax.swing.JFileChooser j = new javax.swing.JFileChooser();
        j.setFileSelectionMode(javax.swing.JFileChooser.FILES_AND_DIRECTORIES);
        int retval  = j.showOpenDialog(this);// .showSaveDialog(this);
        if (retval == javax.swing.JFileChooser.APPROVE_OPTION) {
                //... The user selected a file, get it, use it.
                java.io.File file = j.getSelectedFile();
                RootCertFileFileTextBox.setText(file.getAbsolutePath());
        }
    }//GEN-LAST:event_RootCertFileBrowseButtonActionPerformed

    private void RootCertFileBrowseButtonAncestorAdded(javax.swing.event.AncestorEvent evt) {//GEN-FIRST:event_RootCertFileBrowseButtonAncestorAdded
        // TODO add your handling code here:
    }//GEN-LAST:event_RootCertFileBrowseButtonAncestorAdded

    private void jCheckBoxValidatePeerCertAncestorAdded(javax.swing.event.AncestorEvent evt) {//GEN-FIRST:event_jCheckBoxValidatePeerCertAncestorAdded
       // TODO add your handling code here:        
    }//GEN-LAST:event_jCheckBoxValidatePeerCertAncestorAdded

    private void jCheckBoxSecureConnectionAncestorAdded(javax.swing.event.AncestorEvent evt) {//GEN-FIRST:event_jCheckBoxSecureConnectionAncestorAdded
        // TODO add your handling code here:        
    }//GEN-LAST:event_jCheckBoxSecureConnectionAncestorAdded

    private void jCheckBoxSecureConnectionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCheckBoxSecureConnectionActionPerformed
        if(jCheckBoxSecureConnection.isSelected())
        {
            // Enabled all the controls for secure connection
            jCheckBoxValidatePeerCert.setEnabled(true);
            CertficateFileTextBox.setEnabled(true);
            CertificateFileBrowseButton.setEnabled(true);
            PrivateKeyFilePathTextBox.setEnabled(true);
            PrivateKeyFileBrowseButton.setEnabled(true);
            RootCertFileFileTextBox.setEnabled(true);
            RootCertFileBrowseButton.setEnabled(true);
            KeyPassPhrase.setEnabled(true);
            
            jTextField2.setText("5085");
            RFIDMainDlg.rfidBase.port = 5085;
            String modulePath = new java.io.File("").getAbsolutePath();

            // If text box doesn't cotain any path/text before
            if (0 == CertficateFileTextBox.getText().length())
            {
                String certFilePath = modulePath;
               // certFilePath.concat("client_crt.pem");
                CertficateFileTextBox.setText(certFilePath.concat("\\client_crt.pem"));
            }
            if (0 == PrivateKeyFilePathTextBox.getText().length())
            {
                String privateKeyFilePath = modulePath;
                //privateKeyFilePath.concat("\\client_key.pem");
                PrivateKeyFilePathTextBox.setText(privateKeyFilePath.concat("\\client_key.pem"));
            }
            if (0 == RootCertFileFileTextBox.getText().length())
            {
                String rootCertFilePath = modulePath;
                //rootCertFilePath.concat("\\cacert.pem");
                RootCertFileFileTextBox.setText(rootCertFilePath.concat("\\cacert.pem"));
            }

            KeyPassPhrase.setText("abcd12345");
        }
        else
        {
            // Disable all the controls for secure connection
            jCheckBoxValidatePeerCert.setEnabled(false);
            CertficateFileTextBox.setEnabled(false);
            CertificateFileBrowseButton.setEnabled(false);
            PrivateKeyFilePathTextBox.setEnabled(false);
            PrivateKeyFileBrowseButton.setEnabled(false);
            KeyPassPhrase.setEnabled(false);
            RootCertFileFileTextBox.setEnabled(false);
            RootCertFileBrowseButton.setEnabled(false);

            jTextField2.setText("5084");
            RFIDMainDlg.rfidBase.port = 5084;
        }
        RFIDMainDlg.rfidBase.m_bSecureConnection = jCheckBoxSecureConnection.isSelected();
    }//GEN-LAST:event_jCheckBoxSecureConnectionActionPerformed

    private void jCheckBoxValidatePeerCertActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCheckBoxValidatePeerCertActionPerformed
         RFIDMainDlg.rfidBase.m_bValidatePeer = jCheckBoxValidatePeerCert.isSelected(); 
    }//GEN-LAST:event_jCheckBoxValidatePeerCertActionPerformed

    /**
    * @param args the command line arguments
    */
    public static void main(String args[]) {
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                ConnectionDlg dialog = new ConnectionDlg(new javax.swing.JFrame(), true);
                dialog.addWindowListener(new java.awt.event.WindowAdapter() {
                    public void windowClosing(java.awt.event.WindowEvent e) {
                        System.exit(0);
                    }
                });
                dialog.setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextField CertficateFileTextBox;
    private javax.swing.JButton CertificateFileBrowseButton;
    private javax.swing.JPasswordField KeyPassPhrase;
    private javax.swing.JButton PrivateKeyFileBrowseButton;
    private javax.swing.JTextField PrivateKeyFilePathTextBox;
    private javax.swing.JButton RootCertFileBrowseButton;
    private javax.swing.JTextField RootCertFileFileTextBox;
    private javax.swing.JButton jButtonConnect;
    private javax.swing.JCheckBox jCheckBoxSecureConnection;
    private javax.swing.JCheckBox jCheckBoxValidatePeerCert;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JTextField jTextField1;
    private javax.swing.JTextField jTextField2;
    // End of variables declaration//GEN-END:variables

}
