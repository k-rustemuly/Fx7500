/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * AccessFilterDialog.java
 *
 * Created on May 3, 2011, 5:49:47 PM
 */

import com.mot.rfid.api3.AccessFilter;
import com.mot.rfid.api3.FILTER_MATCH_PATTERN;
import com.mot.rfid.api3.MEMORY_BANK;
import com.mot.rfid.api3.PostFilter;

/**
 *
 * @author CFRN78
 */
public class PostFilterDialog extends javax.swing.JDialog {

    /** Creates new form AccessFilterDialog */
    public PostFilterDialog(java.awt.Frame parent, boolean modal) {
        super(parent, modal);
        initComponents();

        PostFilter postFilter = RFIDMainDlg.rfidBase.postFilter;

        // Set the Memory Bank to EPC
        jComboBoxMemBankA.setSelectedIndex(postFilter.TagPatternA.getMemoryBank().getValue());
        jComboBoxMemBankB.setSelectedIndex(postFilter.TagPatternB.getMemoryBank().getValue());

        // Bit offset
        jTextFieldBitOffsetA.setText(String.valueOf(postFilter.TagPatternA.getBitOffset()));
        jTextFieldBitOffsetB.setText(String.valueOf(postFilter.TagPatternB.getBitOffset()));

        // Tag Pattern
        if (postFilter.TagPatternA.getTagPattern() != null)
        {
            String tagPatternA = RFIDBase.byteArrayToHexString(postFilter.TagPatternA.getTagPattern());
            jTextFieldTagPatternA.setText(tagPatternA);
        }
        if (postFilter.TagPatternB.getTagPattern() != null)
        {
            String tagPatternB = RFIDBase.byteArrayToHexString(postFilter.TagPatternB.getTagPattern());
            jTextFieldTagPatternB.setText(tagPatternB);
        }
   
        // Tag Mask
        if (postFilter.TagPatternA.getTagMask() != null)
        {
            String tagMaskA = RFIDBase.byteArrayToHexString(postFilter.TagPatternA.getTagMask());
            jTextFieldTagMaskA.setText(tagMaskA);
        }

        if (postFilter.TagPatternB.getTagMask() != null)
        {
            String tagMaskB = RFIDBase.byteArrayToHexString(postFilter.TagPatternB.getTagMask());
            jTextFieldTextMaskB.setText(tagMaskB);
        }

        jComboBoxMatch.setSelectedIndex(postFilter.getPostFilterMatchPattern().getValue());

        jCheckBoxUseFilter.setSelected(RFIDMainDlg.rfidBase.isPostFilterSet);
        jCheckBoxUseFilterAction ();
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel2 = new javax.swing.JPanel();
        jTabbedPaneAccessFilter = new javax.swing.JTabbedPane();
        jPanelAccessFilterA = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jComboBoxMemBankA = new javax.swing.JComboBox();
        jTextFieldBitOffsetA = new javax.swing.JTextField();
        jTextFieldTagPatternA = new javax.swing.JTextField();
        jTextFieldTagMaskA = new javax.swing.JTextField();
        jPanelAccessFilterB = new javax.swing.JPanel();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        jComboBoxMemBankB = new javax.swing.JComboBox();
        jTextFieldBitOffsetB = new javax.swing.JTextField();
        jTextFieldTagPatternB = new javax.swing.JTextField();
        jTextFieldTextMaskB = new javax.swing.JTextField();
        jLabel9 = new javax.swing.JLabel();
        jComboBoxMatch = new javax.swing.JComboBox();
        jCheckBoxUseFilter = new javax.swing.JCheckBox();
        jButtonApply = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Post Filter");
        setResizable(false);

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );

        jTabbedPaneAccessFilter.setTabPlacement(javax.swing.JTabbedPane.BOTTOM);

        jLabel1.setText("Memory Bank");

        jLabel2.setText("Bit Offset");

        jLabel3.setText("Tag Pattern (Hex)");

        jLabel4.setText("Tag Mask (Hex)");

        jComboBoxMemBankA.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Reserved", "EPC", "TID", "USER" }));

        javax.swing.GroupLayout jPanelAccessFilterALayout = new javax.swing.GroupLayout(jPanelAccessFilterA);
        jPanelAccessFilterA.setLayout(jPanelAccessFilterALayout);
        jPanelAccessFilterALayout.setHorizontalGroup(
            jPanelAccessFilterALayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelAccessFilterALayout.createSequentialGroup()
                .addGap(18, 18, 18)
                .addGroup(jPanelAccessFilterALayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanelAccessFilterALayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                        .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jLabel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addComponent(jLabel4)
                    .addComponent(jLabel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanelAccessFilterALayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jTextFieldTagPatternA)
                    .addComponent(jTextFieldBitOffsetA, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jComboBoxMemBankA, javax.swing.GroupLayout.Alignment.TRAILING, 0, 99, Short.MAX_VALUE)
                    .addComponent(jTextFieldTagMaskA))
                .addGap(45, 45, 45))
        );
        jPanelAccessFilterALayout.setVerticalGroup(
            jPanelAccessFilterALayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelAccessFilterALayout.createSequentialGroup()
                .addGap(22, 22, 22)
                .addGroup(jPanelAccessFilterALayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(jComboBoxMemBankA, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanelAccessFilterALayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jTextFieldBitOffsetA, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel2))
                .addGap(18, 18, 18)
                .addGroup(jPanelAccessFilterALayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jTextFieldTagPatternA, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel3))
                .addGap(14, 14, 14)
                .addGroup(jPanelAccessFilterALayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jTextFieldTagMaskA, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel4))
                .addContainerGap(14, Short.MAX_VALUE))
        );

        jTabbedPaneAccessFilter.addTab("Tag Pattern A", jPanelAccessFilterA);

        jLabel5.setText("Memory Bank");

        jLabel6.setText("Bit Offset");

        jLabel7.setText("Tag Pattern (Hex)");

        jLabel8.setText("Tag Mask (Hex)");

        jComboBoxMemBankB.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Reserved", "EPC", "TID", "USER" }));

        javax.swing.GroupLayout jPanelAccessFilterBLayout = new javax.swing.GroupLayout(jPanelAccessFilterB);
        jPanelAccessFilterB.setLayout(jPanelAccessFilterBLayout);
        jPanelAccessFilterBLayout.setHorizontalGroup(
            jPanelAccessFilterBLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelAccessFilterBLayout.createSequentialGroup()
                .addGap(18, 18, 18)
                .addGroup(jPanelAccessFilterBLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanelAccessFilterBLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                        .addComponent(jLabel5, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jLabel7, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addComponent(jLabel8)
                    .addComponent(jLabel6, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanelAccessFilterBLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jTextFieldTagPatternB)
                    .addComponent(jTextFieldBitOffsetB, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jComboBoxMemBankB, javax.swing.GroupLayout.Alignment.TRAILING, 0, 99, Short.MAX_VALUE)
                    .addComponent(jTextFieldTextMaskB))
                .addGap(45, 45, 45))
        );
        jPanelAccessFilterBLayout.setVerticalGroup(
            jPanelAccessFilterBLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelAccessFilterBLayout.createSequentialGroup()
                .addGap(22, 22, 22)
                .addGroup(jPanelAccessFilterBLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel5)
                    .addComponent(jComboBoxMemBankB, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanelAccessFilterBLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jTextFieldBitOffsetB, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel6))
                .addGap(18, 18, 18)
                .addGroup(jPanelAccessFilterBLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jTextFieldTagPatternB, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel7))
                .addGap(14, 14, 14)
                .addGroup(jPanelAccessFilterBLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jTextFieldTextMaskB, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel8))
                .addContainerGap(14, Short.MAX_VALUE))
        );

        jTabbedPaneAccessFilter.addTab("Tag Pattern B", jPanelAccessFilterB);

        jLabel9.setText("Match");

        jComboBoxMatch.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "A_AND_B", "NOTA_AND_B", "NOTA_AND_NOTB", "A_AND_NOTB", "A" }));

        jCheckBoxUseFilter.setText("Use Filter");
        jCheckBoxUseFilter.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCheckBoxUseFilterActionPerformed(evt);
            }
        });

        jButtonApply.setText("Apply");
        jButtonApply.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonApplyActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jTabbedPaneAccessFilter, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(83, 83, 83)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jCheckBoxUseFilter)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(jButtonApply))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel9)
                                .addGap(18, 18, 18)
                                .addComponent(jComboBoxMatch, javax.swing.GroupLayout.PREFERRED_SIZE, 115, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jTabbedPaneAccessFilter, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel9)
                    .addComponent(jComboBoxMatch, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 14, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jCheckBoxUseFilter)
                    .addComponent(jButtonApply))
                .addContainerGap())
        );

        jTabbedPaneAccessFilter.getAccessibleContext().setAccessibleName("Filter A");

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButtonApplyActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonApplyActionPerformed
        try 
        {        
            if (jCheckBoxUseFilter.isSelected())
            {        
                PostFilter postFilter = RFIDMainDlg.rfidBase.postFilter;
                postFilter.TagPatternA.setMemoryBank(RFIDMainDlg.rfidBase.getMemoryBankEnum(jComboBoxMemBankA.getSelectedIndex()));
                postFilter.TagPatternB.setMemoryBank(RFIDMainDlg.rfidBase.getMemoryBankEnum(jComboBoxMemBankB.getSelectedIndex()));

                postFilter.TagPatternA.setBitOffset(Integer.parseInt(jTextFieldBitOffsetA.getText()));
                postFilter.TagPatternB.setBitOffset(Integer.parseInt(jTextFieldBitOffsetB.getText()));

                postFilter.TagPatternA.setTagPattern(RFIDBase.hexStringToByteArray(jTextFieldTagPatternA.getText()));
                postFilter.TagPatternB.setTagPattern(RFIDBase.hexStringToByteArray(jTextFieldTagPatternB.getText()));

                postFilter.TagPatternA.setTagMask(RFIDBase.hexStringToByteArray(jTextFieldTagMaskA.getText()));
                postFilter.TagPatternB.setTagMask(RFIDBase.hexStringToByteArray(jTextFieldTextMaskB.getText()));

                postFilter.TagPatternA.setTagPatternBitCount(RFIDBase.hexStringToByteArray(jTextFieldTagPatternA.getText()).length * 8);
                postFilter.TagPatternB.setTagPatternBitCount(RFIDBase.hexStringToByteArray(jTextFieldTagPatternB.getText()).length * 8);

                postFilter.TagPatternA.setTagMaskBitCount(RFIDBase.hexStringToByteArray(jTextFieldTagMaskA.getText()).length * 8);
                postFilter.TagPatternB.setTagMaskBitCount(RFIDBase.hexStringToByteArray(jTextFieldTextMaskB.getText()).length * 8);

                FILTER_MATCH_PATTERN patternMatch = FILTER_MATCH_PATTERN.A;
                switch (jComboBoxMatch.getSelectedIndex())
                {
                    case 0:
                        patternMatch = FILTER_MATCH_PATTERN.A_AND_B;
                        break;
                    case 1:
                        patternMatch = FILTER_MATCH_PATTERN.NOTA_AND_B;
                        break;
                    case 2:
                        patternMatch = FILTER_MATCH_PATTERN.NOTA_AND_NOTB;
                        break;
                    case 3:
                        patternMatch = FILTER_MATCH_PATTERN.A_AND_NOTB;
                        break;
                    case 4:
                        patternMatch = FILTER_MATCH_PATTERN.A;
                        break;

                }

                postFilter.setPostFilterMatchPattern(patternMatch);

                RFIDMainDlg.rfidBase.isPostFilterSet = true;
            } 
            else
            {
                RFIDMainDlg.rfidBase.isPostFilterSet = false;
            }

            RFIDMainDlg.rfidBase.postStatusNotification(RFIDBase.API_SUCCESS,
                        " PostFilter is set to " + Boolean.toString(RFIDMainDlg.rfidBase.isPostFilterSet)); 
        } catch (Exception ex) {
        RFIDMainDlg.rfidBase.postStatusNotification(RFIDBase.PARAM_ERROR, ex.getMessage());
        }         
    }//GEN-LAST:event_jButtonApplyActionPerformed

    private void jCheckBoxUseFilterAction () {
        if (true == jCheckBoxUseFilter.isSelected()) {
            jComboBoxMemBankA.enable();
            jComboBoxMemBankB.enable();
            jTextFieldBitOffsetA.enable();
            jTextFieldBitOffsetB.enable();
            jTextFieldTagPatternA.enable();
            jTextFieldTagPatternB.enable();
            jTextFieldTagMaskA.enable();
            jTextFieldTextMaskB.enable();
            jComboBoxMatch.enable(); 
        } else {
            jComboBoxMemBankA.disable();
            jComboBoxMemBankB.disable();
            jTextFieldBitOffsetA.disable();
            jTextFieldBitOffsetB.disable();
            jTextFieldTagPatternA.disable();
            jTextFieldTagPatternB.disable();
            jTextFieldTagMaskA.disable();
            jTextFieldTextMaskB.disable();
            jComboBoxMatch.disable();             
        }       
        jTabbedPaneAccessFilter.repaint();       
        jComboBoxMatch.repaint();
    }
    
    private void jCheckBoxUseFilterActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCheckBoxUseFilterActionPerformed
        // TODO add your handling code here:
        jCheckBoxUseFilterAction ();
    }//GEN-LAST:event_jCheckBoxUseFilterActionPerformed

    /**
    * @param args the command line arguments
    */
    public static void main(String args[]) {
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                PostFilterDialog dialog = new PostFilterDialog(new javax.swing.JFrame(), true);
                dialog.addWindowListener(new java.awt.event.WindowAdapter() {
                    public void windowClosing(java.awt.event.WindowEvent e) {
                        System.exit(0);
                    }
                });
                dialog.setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButtonApply;
    private javax.swing.JCheckBox jCheckBoxUseFilter;
    private javax.swing.JComboBox jComboBoxMatch;
    private javax.swing.JComboBox jComboBoxMemBankA;
    private javax.swing.JComboBox jComboBoxMemBankB;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanelAccessFilterA;
    private javax.swing.JPanel jPanelAccessFilterB;
    private javax.swing.JTabbedPane jTabbedPaneAccessFilter;
    private javax.swing.JTextField jTextFieldBitOffsetA;
    private javax.swing.JTextField jTextFieldBitOffsetB;
    private javax.swing.JTextField jTextFieldTagMaskA;
    private javax.swing.JTextField jTextFieldTagPatternA;
    private javax.swing.JTextField jTextFieldTagPatternB;
    private javax.swing.JTextField jTextFieldTextMaskB;
    // End of variables declaration//GEN-END:variables

}
