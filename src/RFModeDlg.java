/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * RFModeDlg.java
 *
 * Created on May 3, 2011, 7:16:24 AM
 */

import com.mot.rfid.api3.Antennas;
import com.mot.rfid.api3.Antennas.RFMode;
import com.mot.rfid.api3.FORWARD_LINK_MODULATION;
import com.mot.rfid.api3.InvalidUsageException;
import com.mot.rfid.api3.OperationFailureException;
import com.mot.rfid.api3.ReaderCapabilities;
import com.mot.rfid.api3.SPECTRAL_MASK_INDICATOR;
import java.awt.event.ItemEvent;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableModel;

/**
 *
 * @author CFRN78
 */
public class RFModeDlg extends javax.swing.JDialog {
    
    /** Creates new form RFModeDlg */
    public RFModeDlg(java.awt.Frame parent, boolean modal) {
        super(parent, modal);
        initComponents();



 
       // Add RF Mode table index
       for (int index = 0; index < RFIDMainDlg.rfidBase.getMyReader().ReaderCapabilities.RFModes.getRFModeTableInfo(0).length(); index++)
            jComboBoxRFmodeTableIndex.addItem(String.valueOf(index));

      
        // Add antennas
        short[] antennaList = RFIDMainDlg.rfidBase.getMyReader().Config.Antennas.getAvailableAntennas();
        for (int index = 0; index < antennaList.length; index++)
            jComboBoxAntennaID.addItem(String.valueOf(antennaList[index]));
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jComboBoxAntennaID = new javax.swing.JComboBox();
        jTextFieldTari = new javax.swing.JTextField();
        jComboBoxRFmodeTableIndex = new javax.swing.JComboBox();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jButtonApply = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("RF Mode");
        setResizable(false);

        jLabel1.setText("Antenna ID");

        jLabel2.setText("Tari Value");

        jLabel3.setText("RF mode table index");

        jComboBoxAntennaID.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(ItemEvent evt) {
                jComboBoxAntennaIDItemStateChanged(evt);
            }
        });

        jComboBoxRFmodeTableIndex.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(ItemEvent evt) {
                jComboBoxRFmodeTableIndexItemStateChanged(evt);
            }
        });

        jTable1.setModel(new DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Parameter", "Value"
            }
        ));
        jTable1.setShowHorizontalLines(false);
        jTable1.setShowVerticalLines(false);
        jScrollPane1.setViewportView(jTable1);

        jButtonApply.setText("Apply");
        jButtonApply.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonApplyActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel3)
                            .addComponent(jLabel1)
                            .addComponent(jLabel2))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jComboBoxAntennaID, 0, 67, Short.MAX_VALUE)
                            .addComponent(jTextFieldTari)
                            .addComponent(jComboBoxRFmodeTableIndex, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 248, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(197, Short.MAX_VALUE)
                .addComponent(jButtonApply)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(jComboBoxAntennaID, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(jTextFieldTari, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(jComboBoxRFmodeTableIndex, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 193, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jButtonApply)
                .addContainerGap(20, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jComboBoxAntennaIDItemStateChanged(ItemEvent evt) {//GEN-FIRST:event_jComboBoxAntennaIDItemStateChanged
        if (evt.getStateChange() == ItemEvent.SELECTED)
        {
           int antennaID = jComboBoxAntennaID.getSelectedIndex();
           int rfModeIndex = 0;
           antennaID += 1;
            try {
                RFMode rFMode = RFIDMainDlg.rfidBase.getMyReader().Config.Antennas.getRFMode(antennaID);
                jTextFieldTari.setText(String.valueOf(rFMode.getTari()));
                rfModeIndex = rFMode.getTableIndex();

                jComboBoxRFmodeTableIndex.setSelectedIndex(rfModeIndex);
              
            } catch (InvalidUsageException ex) {
                RFIDMainDlg.rfidBase.postStatusNotification(RFIDBase.PARAM_ERROR, ex.getVendorMessage());
            } catch (OperationFailureException ex) {
                RFIDMainDlg.rfidBase.postStatusNotification(ex.getStatusDescription(), ex.getVendorMessage());
        }

        }
    }//GEN-LAST:event_jComboBoxAntennaIDItemStateChanged

    private void jComboBoxRFmodeTableIndexItemStateChanged(ItemEvent evt) {//GEN-FIRST:event_jComboBoxRFmodeTableIndexItemStateChanged
        if (evt.getStateChange() == ItemEvent.SELECTED)
        {
            int rfModeTableIndex = jComboBoxRFmodeTableIndex.getSelectedIndex();
            //if (rfModeTableIndex > 0) rfModeTableIndex --; // REMOVED to make it identical to C host sample app
            updateRFModeTable(rfModeTableIndex);
        }
    }//GEN-LAST:event_jComboBoxRFmodeTableIndexItemStateChanged

    private void jButtonApplyActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonApplyActionPerformed
       try {
            int antennaID = jComboBoxAntennaID.getSelectedIndex();
            antennaID += 1;

            RFMode rFMode = RFIDMainDlg.rfidBase.getMyReader().Config.Antennas.getRFMode(antennaID);
            int rfModeTableIndex = 0;

            // set the RF mode table index
            rfModeTableIndex = jComboBoxRFmodeTableIndex.getSelectedIndex();
            rFMode.setTableIndex(rfModeTableIndex);

            // set the Tari
            rFMode.setTari(Integer.parseInt(jTextFieldTari.getText()));

            RFIDMainDlg.rfidBase.getMyReader().Config.Antennas.setRFMode(antennaID, rFMode);
            RFIDMainDlg.rfidBase.postStatusNotification(RFIDBase.API_SUCCESS, null);

        } catch (InvalidUsageException ex) {
            RFIDMainDlg.rfidBase.postStatusNotification(RFIDBase.PARAM_ERROR, ex.getVendorMessage());
        } catch (OperationFailureException ex) {
            RFIDMainDlg.rfidBase.postStatusNotification(ex.getStatusDescription(), ex.getVendorMessage());
        }
    }//GEN-LAST:event_jButtonApplyActionPerformed

    private void updateRFModeTable(int rfModeIndex)
    {
        TableModel tableModel = jTable1.getModel();
        int rowId = 0;
        // Get Reader Capabilities
        ReaderCapabilities readerCaps = RFIDMainDlg.rfidBase.getMyReader().ReaderCapabilities;

        // clear the rows
        DefaultTableModel rfTable = (DefaultTableModel)jTable1.getModel();
        rfTable.setRowCount(0);


        ((DefaultTableModel)tableModel).insertRow(rowId++, new Object[] {"Mode Identifier", String.valueOf(readerCaps.RFModes.getRFModeTableInfo(0).getRFModeTableEntryInfo(rfModeIndex).getModeIdentifer())});
        ((DefaultTableModel)tableModel).insertRow(rowId++, new Object[] {"M", readerCaps.RFModes.getRFModeTableInfo(0).getRFModeTableEntryInfo(rfModeIndex).getModulation().toString()});
        ((DefaultTableModel)tableModel).insertRow(rowId++, new Object[] {"DR", readerCaps.RFModes.getRFModeTableInfo(0).getRFModeTableEntryInfo(rfModeIndex).getDivideRatio().toString()});
         String flModulation = "";

         if(readerCaps.RFModes.getRFModeTableInfo(0).getRFModeTableEntryInfo(rfModeIndex).getForwardLinkModulationType() == FORWARD_LINK_MODULATION.FORWARD_LINK_MODULATION_DSB_ASK)
            flModulation = "DSB_ASK";
         else if(readerCaps.RFModes.getRFModeTableInfo(0).getRFModeTableEntryInfo(rfModeIndex).getForwardLinkModulationType() == FORWARD_LINK_MODULATION.FORWARD_LINK_MODULATION_PR_ASK)
            flModulation = "PR_ASK";
         else if(readerCaps.RFModes.getRFModeTableInfo(0).getRFModeTableEntryInfo(rfModeIndex).getForwardLinkModulationType() == FORWARD_LINK_MODULATION.FORWARD_LINK_MODULATION_SSB_ASK)
            flModulation = "SSB_ASK";
         else
            flModulation = readerCaps.RFModes.getRFModeTableInfo(0).getRFModeTableEntryInfo(rfModeIndex).getForwardLinkModulationType().toString();

        ((DefaultTableModel)tableModel).insertRow(rowId++, new Object[] {"Forward Link Modulation", flModulation });
        ((DefaultTableModel)tableModel).insertRow(rowId++, new Object[] {"PIE", String.valueOf(readerCaps.RFModes.getRFModeTableInfo(0).getRFModeTableEntryInfo(rfModeIndex).getPieValue())});
        ((DefaultTableModel)tableModel).insertRow(rowId++, new Object[] {"Min Tari", String.valueOf(readerCaps.RFModes.getRFModeTableInfo(0).getRFModeTableEntryInfo(rfModeIndex).getMinTariValue())});
        ((DefaultTableModel)tableModel).insertRow(rowId++, new Object[] {"Max Tari", String.valueOf(readerCaps.RFModes.getRFModeTableInfo(0).getRFModeTableEntryInfo(rfModeIndex).getMaxTariValue())});
        ((DefaultTableModel)tableModel).insertRow(rowId++, new Object[] {"Step Tari", String.valueOf(readerCaps.RFModes.getRFModeTableInfo(0).getRFModeTableEntryInfo(rfModeIndex).getStepTariValue())});
        ((DefaultTableModel)tableModel).insertRow(rowId++, new Object[] {"EPC HAG T&C conformance", readerCaps.RFModes.getRFModeTableInfo(0).getRFModeTableEntryInfo(rfModeIndex).isEpcHAGTCConformance() ? "yes" : "no"});

        String smIndicator = "";

        if (readerCaps.RFModes.getRFModeTableInfo(0).getRFModeTableEntryInfo(rfModeIndex).getSpectralMaskIndicator() == SPECTRAL_MASK_INDICATOR.SMI_DI)
            smIndicator = "DI";
        else if((readerCaps.RFModes.getRFModeTableInfo(0).getRFModeTableEntryInfo(rfModeIndex).getSpectralMaskIndicator() == SPECTRAL_MASK_INDICATOR.SMI_MI))
            smIndicator = "MI";
        else if((readerCaps.RFModes.getRFModeTableInfo(0).getRFModeTableEntryInfo(rfModeIndex).getSpectralMaskIndicator() == SPECTRAL_MASK_INDICATOR.SMI_SI))
            smIndicator = "SI";
        else if((readerCaps.RFModes.getRFModeTableInfo(0).getRFModeTableEntryInfo(rfModeIndex).getSpectralMaskIndicator() == SPECTRAL_MASK_INDICATOR.SMI_UNKNOWN))
            smIndicator = "Unknown";
        else
            smIndicator = readerCaps.RFModes.getRFModeTableInfo(0).getRFModeTableEntryInfo(rfModeIndex).getSpectralMaskIndicator().toString();
        
        ((DefaultTableModel)tableModel).insertRow(rowId++, new Object[] {"Spectral Mask Indicator", smIndicator});
        ((DefaultTableModel)tableModel).insertRow(rowId++, new Object[] {"BDR", String.valueOf(readerCaps.RFModes.getRFModeTableInfo(0).getRFModeTableEntryInfo(rfModeIndex).getBdrValue())});

    }
    /**
    * @param args the command line arguments
    */
    public static void main(String args[]) {
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                RFModeDlg dialog = new RFModeDlg(new javax.swing.JFrame(), true);
                dialog.addWindowListener(new java.awt.event.WindowAdapter() {
                    public void windowClosing(java.awt.event.WindowEvent e) {
                        System.exit(0);
                    }
                });
                dialog.setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButtonApply;
    private javax.swing.JComboBox jComboBoxAntennaID;
    private javax.swing.JComboBox jComboBoxRFmodeTableIndex;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jTable1;
    private javax.swing.JTextField jTextFieldTari;
    // End of variables declaration//GEN-END:variables

}
